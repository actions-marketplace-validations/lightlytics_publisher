"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publish = publish;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var got = require('got');

var fs = require('fs');

var path = require('path');

var _require = require("./scanners/locals_collector"),
    localsCollector = _require.localsCollector;

var constants = require("./constants");

function publish(_x) {
  return _publish.apply(this, arguments);
}

function _publish() {
  _publish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var apiUrl, tfWorkingDir, tfPlan, tfGraph, collectionToken, metadata, workingDir, modulesPath, modules, locals, plan, graph, publishUrl, headers, data, response, eventId, customerId;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiUrl = _ref.apiUrl, tfWorkingDir = _ref.tfWorkingDir, tfPlan = _ref.tfPlan, tfGraph = _ref.tfGraph, collectionToken = _ref.collectionToken, metadata = _ref.metadata;
            workingDir = tfWorkingDir.replace(/\/$/, '');
            modulesPath = path.normalize("".concat(workingDir, "/.terraform/modules/modules.json"));
            modules = {};

            if (fs.existsSync(modulesPath)) {
              modules = JSON.parse(fs.readFileSync(modulesPath, "utf8"));
            }

            locals = {};
            if (!modules.Modules) modules["Modules"] = [];
            modules["Modules"].push({
              Key: "root_module",
              Source: "root_module",
              Dir: "./"
            });
            modules.Modules.filter(function (module) {
              return module.Key && module.Dir && module.Source;
            }).filter(function (module) {
              return fs.existsSync(path.normalize("".concat(workingDir, "/").concat(module.Dir)));
            }).forEach(function (module) {
              fs.readdirSync(path.normalize("".concat(workingDir, "/").concat(module.Dir))).forEach(function (fileName) {
                var fileExtension = path.parse(fileName).ext;
                if (fileExtension !== ".tf") return;
                var filePath = "".concat(workingDir, "/").concat(module.Dir, "/").concat(fileName);
                var moduleContent = fs.readFileSync(filePath, "utf8");

                function addData(type) {
                  function innerAddData(data) {
                    if (!locals[type][module.Source]) locals[type][module.Source] = [];
                    locals[type][module.Source].push(data);
                  }

                  return innerAddData;
                }

                var localsProcessor = localsCollector(addData('locals'));
                moduleContent.split("\n").forEach(function (line) {
                  localsProcessor(line);
                });
              });
            });
            plan = JSON.parse(fs.readFileSync(tfPlan, 'utf8'));
            removeAwsCredentials(plan);

            if (tfGraph) {
              graph = fs.readFileSync(tfGraph, 'utf8');
            }

            publishUrl = "https://".concat(apiUrl).concat(constants.PublishEndpoint);
            headers = _defineProperty({}, constants.LightlyticsTokenKey, collectionToken);
            data = {
              locals: locals,
              plan: plan,
              graph: graph,
              metadata: metadata
            };
            _context.next = 17;
            return got.post(publishUrl, {
              json: data,
              responseType: 'json',
              headers: headers
            });

          case 17:
            response = _context.sent;
            eventId = response.body.eventId;
            customerId = response.body.customerId;
            return _context.abrupt("return", {
              eventId: eventId,
              customerId: customerId
            });

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _publish.apply(this, arguments);
}

function removeAwsCredentials(plan) {
  if (plan && plan.configuration && plan.configuration.provider_config && plan.configuration.provider_config.aws && plan.configuration.provider_config.aws.expressions) {
    delete plan['configuration']['provider_config']['aws']['expressions']['access_key'];
    delete plan['configuration']['provider_config']['aws']['expressions']['secret_key'];
  }
}