const core = require('@actions/core');
const github = require('@actions/github');
const {Octokit} = require('@octokit/rest');
const got = require('got');
const fs = require('fs')

function removeAwsCredentials(plan) {
    delete plan['configuration']['provider_config']['aws']['expressions']['access_key']
    delete plan['configuration']['provider_config']['aws']['expressions']['secret_key']
}

try {
    const hostname = core.getInput('ll-hostname')
    const terraformPlanPath = core.getInput('plan-json');
    const plan = JSON.parse(fs.readFileSync(terraformPlanPath, 'utf8'))

    removeAwsCredentials(plan)

    const url = `https://${hostname}/api/v1/collection/terraform`
    const headers = {
        'X-Lightlytics-Token': core.getInput('collection-token')
    }

    let source = {}
    const isPullRequestTriggered = github.context.payload.pull_request != null

    if (isPullRequestTriggered) {
        source = {
            name: 'Github',
            type: 'Github',
            format: 'Terraform',
            branch: github.context.payload.pull_request.head.ref,
            base_branch: github.context.payload.pull_request.base.ref,
            commit_hash: github.context.payload.pull_request.head.sha,
            pr_id: github.context.payload.pull_request.number,
            repository: github.context.payload.repository.full_name,
            user_name: github.context.payload.pull_request.user.login
        }
    } else {
        source = {
            name: 'Github',
            type: 'Github',
            format: 'Terraform',
            branch: github.context.ref.replace('refs/heads/', ''),
            base_branch: github.context.payload.repository.default_branch,
            commit_hash: github.context.sha,
            pr_id: '',
            repository: github.context.payload.repository.full_name,
            user_name: github.context.actor
        }
    }

    const data = {
        plan,
        metadata: {source},
    }

    got.post(url, {
        json: data,
        responseType: 'json',
        headers
    }).then((res) => {
        const eventId = res.body.eventId

        if (isPullRequestTriggered) {
            const octokit = new Octokit({
                auth: core.getInput('github-token')
            })

            octokit.issues.createComment({
                ...github.context.repo,
                issue_number: github.context.payload.pull_request.number,
                body: `An execution simulation has been generated by **Lightlytics**, to view this run impact analysis, Visit:
https://${hostname}/simulations/${eventId}

> _This comment was added automatically by a git workflow to help DevOps teams predict what will be the impact of the proposed change after completing this PR_`
            })
                .then(() => console.log('GitHub message sent successfully'))
                .catch(err => console.log(`failed to send message on PR: ${err.message}`));
        }

        core.setOutput('EventId', res.body.eventId);
    }).catch(error => core.setFailed(error.message));
} catch (error) {
    core.setFailed(error.message);
}
